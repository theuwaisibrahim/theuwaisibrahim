
import tkinter
from tkinter import messagebox
import tkinter as tk
import matplotlib
import matplotlib.pyplot as plt
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from tkinter import *
import numpy as np
matplotlib.use('Qt5Agg')


class StudentsAcademicPerformance:

    def __init__(self):


        # Create object

        window = Tk()

        # Adjust size

        # Adjust size window
        window.geometry('1000x800')

        window.title("STUDENTS ACADEMIC PERFORMANCE")
        
        # Add image file
        bg = PhotoImage(file = "background.png") 
        
        #Show image using label
        label1 = Label( window, image = bg)
        label1.place(x = 0,y = 0)


        # variables to store inputs
        self.a = StringVar()
        self.b = StringVar()
        self.c= StringVar()
        self.d = StringVar()



		# varianbles for outputs
        self.total = StringVar()
        self.cog = StringVar()
        self.output1 = StringVar()

		# text boxes to hold inputs and outputs
        
        Label(window, text=None, bg='MistyRose2').grid(row=1,column=1)#TO CREATE WHITESPACE
        Label(window, text=None, bg='MistyRose2').grid(row=2,column=1)
        Label(window, text=None, bg='MistyRose2').grid(row=3,column=1)
        Label(window, text=None, bg='MistyRose2').grid(row=4,column=1)
       
        #label tajuk 
        #Label(window, text="STUDENTS ACADEMIC PERFORMANCE",fg='brown', font="Helvetica 15 bold",width = 50,height = 2).grid(row=1,column=1,padx=(250,0), pady=30)
    
        
        #for every widgets
        Label(window, text="     Attendance ~ range 0-100 (%)     ", bg='pink').grid(row=5,column=0,padx=5, pady=10)
        Entry(window, textvariable = self.a ,
              justify=CENTER).grid(row=5,column=1)
        
        Label(window, text="Response in Class ~ range 0-100 (%)", bg='pink').grid(row=6,column=0,padx=5, pady=10)
        Entry(window, textvariable = self.b,
              justify=CENTER).grid(row=6,column=1)
        
        Label(window, text="Total Marks of Test ~ range 0-100 (%)", bg='pink').grid(row=7,column=0,padx=5, pady=10)
        Entry(window, textvariable = self.c,
              justify=CENTER).grid(row=7,column=1)
        
        Label(window, text="Final Project Marks ~ range 0-100 (%)", bg='pink').grid(row=8,column=0,padx=5, pady=10)
        Entry(window, textvariable = self.d,
              justify=CENTER).grid(row=8,column=1)
        
        
        Label(window, text="         Total:        ", fg='gray9', bg='indian red').grid(row=9,column=0,padx=5, pady=10)
        Label(window, textvariable = self.total,
        font="Helvetica 12 bold",
        justify=CENTER).grid(row=9,column=1)
        
        Label(window, text="Center of Gravity", fg='gray9', bg='indian red').grid(row=10,column=0,padx=5, pady=10)
        Label(window, textvariable = self.cog,
        font="Helvetica 12 bold",
        justify=CENTER).grid(row=10,column=1)
        
        Label(window, text="        RESULT       ", fg='gray9', bg='indian red').grid(row=11,column=0,padx=5, pady=10)
        Label(window, textvariable = self.output1,
        font="Helvetica 12 bold",
        justify=CENTER).grid(row=11,column=1)
        
        Label(window, text="[Please make sure all input box are filled.]", fg='red').grid(row=12,column=1,padx=5, pady=10)
        Button(window, text="CALCULATE", fg='brown', width = 22,height = 3, justify=CENTER, command=self.calcResult).grid(row=13,column=1,padx=5, pady=10)

        window.mainloop()
        
    #where the calculation happens
    def calcResult(self):

        a = int(self.a.get())
        b = int(self.b.get())
        c = int(self.c.get())
        d = int(self.d.get())
    
        
            
        # Generate universe variables
        # Antecedent
        attendance = ctrl.Antecedent(np.arange(0, 101, 1), 'attendance')
        respondInClass = ctrl.Antecedent(np.arange(0, 101, 1), 'respondInClass')
        totalMarksOfTests = ctrl.Antecedent(np.arange(0, 101, 1), 'totalMarksOfTests')
        finalProjectMarks = ctrl.Antecedent(np.arange(0, 101, 1), 'finalProjectMarks')
        # Consequent
        studentsPerformance = ctrl.Consequent(np.arange(0, 101, 1), 'studentsPerformance')

        
        #Generate fuzzy membership function

        #Attendance
        attendance['very_poor'] = fuzz.trapmf(attendance.universe, [0, 0, 20, 30])
        attendance['poor'] = fuzz.trimf(attendance.universe, [20, 35, 50])
        attendance['average'] = fuzz.trimf(attendance.universe, [40, 55, 70])
        attendance['good'] = fuzz.trimf(attendance.universe, [60, 75, 90])
        attendance['excellent'] = fuzz.trapmf(attendance.universe, [80, 90, 100, 100])

        #RespondInClass
        respondInClass['very_low'] = fuzz.trapmf(respondInClass.universe, [0, 0, 20, 30])
        respondInClass['low'] = fuzz.trimf(respondInClass.universe, [20, 35, 50])
        respondInClass['average'] = fuzz.trimf(respondInClass.universe, [40, 55, 70])
        respondInClass['good'] = fuzz.trimf(respondInClass.universe, [60, 75, 90])
        respondInClass['excellent'] = fuzz.trapmf(respondInClass.universe, [80, 90, 100, 100])

        #TotalMarksOfTests
        totalMarksOfTests['very_low'] = fuzz.trapmf(totalMarksOfTests.universe, [0, 0, 20, 30])
        totalMarksOfTests['low'] = fuzz.trimf(totalMarksOfTests.universe, [20, 35, 50])
        totalMarksOfTests['average'] = fuzz.trimf(totalMarksOfTests.universe, [40, 55, 70])
        totalMarksOfTests['high'] = fuzz.trimf(totalMarksOfTests.universe, [60, 75, 90])
        totalMarksOfTests['very_high'] = fuzz.trapmf(totalMarksOfTests.universe, [80, 90, 100, 100])

        #FinalProjectMarks
        finalProjectMarks['very_low'] = fuzz.trapmf(finalProjectMarks.universe, [0, 0, 20, 30])
        finalProjectMarks['low'] = fuzz.trimf(finalProjectMarks.universe, [20, 35, 50])
        finalProjectMarks['average'] = fuzz.trimf(finalProjectMarks.universe, [40, 55, 70])
        finalProjectMarks['high'] = fuzz.trimf(finalProjectMarks.universe, [60, 75, 90])
        finalProjectMarks['very_high'] = fuzz.trapmf(finalProjectMarks.universe, [80, 90, 100, 100])

        #StudentsAcademicPerformance
        studentsPerformance['poor'] = fuzz.trapmf(studentsPerformance.universe, [0, 0, 20, 30])
        studentsPerformance['sufficient'] = fuzz.trimf(studentsPerformance.universe, [20, 35, 50])
        studentsPerformance['average'] = fuzz.trimf(studentsPerformance.universe, [40, 55, 70])
        studentsPerformance['good'] = fuzz.trimf(studentsPerformance.universe, [60, 75, 90])
        studentsPerformance['excellent'] = fuzz.trapmf(studentsPerformance.universe, [80, 90, 100, 100])

        """# Fuzzy Rules"""

        rule1 = ctrl.Rule(attendance['very_poor'] & respondInClass['very_low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['poor'])
        rule2 = ctrl.Rule(attendance['very_poor'] & respondInClass['low'] & totalMarksOfTests['low'] & finalProjectMarks['very_low'] , studentsPerformance['poor'])
        rule3 = ctrl.Rule(attendance['poor'] & respondInClass['low'] & totalMarksOfTests['low'] & finalProjectMarks['very_low'] , studentsPerformance['poor'])
        rule4 = ctrl.Rule(attendance['good'] & respondInClass['very_low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['poor'])
        rule5 = ctrl.Rule(attendance['average'] & respondInClass['very_low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['poor'])
        rule6 = ctrl.Rule(attendance['poor'] & respondInClass['very_low'] & totalMarksOfTests['low'] & finalProjectMarks['average'] , studentsPerformance['poor'])
        rule7 = ctrl.Rule(attendance['poor'] & respondInClass['average'] & totalMarksOfTests['low'] & finalProjectMarks['low'] , studentsPerformance['sufficient'])
        rule8 = ctrl.Rule(attendance['average'] & respondInClass['average'] & totalMarksOfTests['low'] & finalProjectMarks['low'] , studentsPerformance['sufficient'])
        rule9 = ctrl.Rule(attendance['average'] & respondInClass['low'] & totalMarksOfTests['low'] & finalProjectMarks['average'] , studentsPerformance['sufficient'])
        rule10 = ctrl.Rule(attendance['average'] & respondInClass['low'] & totalMarksOfTests['average'] & finalProjectMarks['low'] , studentsPerformance['sufficient'])

        rule11 = ctrl.Rule(attendance['very_poor'] & respondInClass['low'] & totalMarksOfTests['high'] & finalProjectMarks['average'] , studentsPerformance['average'])
        rule12 = ctrl.Rule(attendance['very_poor'] & respondInClass['very_low'] & totalMarksOfTests['average'] & finalProjectMarks['high'] , studentsPerformance['sufficient'])
        rule13 = ctrl.Rule(attendance['poor'] & respondInClass['low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['sufficient'])
        rule14 = ctrl.Rule(attendance['poor'] & respondInClass['good'] & totalMarksOfTests['low'] & finalProjectMarks['average'] , studentsPerformance['sufficient'])
        rule15 = ctrl.Rule(attendance['good'] & respondInClass['low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['sufficient'])
        rule16 = ctrl.Rule(attendance['excellent'] & respondInClass['low'] & totalMarksOfTests['low'] & finalProjectMarks['low'] , studentsPerformance['sufficient'])
        rule17 = ctrl.Rule(attendance['poor'] & respondInClass['average'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['sufficient'])
        rule18 = ctrl.Rule(attendance['poor'] & respondInClass['good'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['sufficient'])
        rule19 = ctrl.Rule(attendance['average'] & respondInClass['low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['sufficient'])
        rule20 = ctrl.Rule(attendance['very_poor'] & respondInClass['good'] & totalMarksOfTests['high'] & finalProjectMarks['average'] , studentsPerformance['average'])

        rule21 = ctrl.Rule(attendance['very_poor'] & respondInClass['very_low'] & totalMarksOfTests['very_high'] & finalProjectMarks['high'] , studentsPerformance['average'])
        rule22 = ctrl.Rule(attendance['very_poor'] & respondInClass['very_low'] & totalMarksOfTests['high'] & finalProjectMarks['very_high'] , studentsPerformance['average'])
        rule23 = ctrl.Rule(attendance['poor'] & respondInClass['low'] & totalMarksOfTests['average'] & finalProjectMarks['high'] , studentsPerformance['average'])
        rule24 = ctrl.Rule(attendance['poor'] & respondInClass['average'] & totalMarksOfTests['average'] & finalProjectMarks['average'] , studentsPerformance['average'])
        rule25 = ctrl.Rule(attendance['poor'] & respondInClass['good'] & totalMarksOfTests['average'] & finalProjectMarks['high'] , studentsPerformance['average'])
        rule26 = ctrl.Rule(attendance['average'] & respondInClass['average'] & totalMarksOfTests['average'] & finalProjectMarks['average'] , studentsPerformance['average'])
        rule27 = ctrl.Rule(attendance['average'] & respondInClass['average'] & totalMarksOfTests['high'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule28 = ctrl.Rule(attendance['good'] & respondInClass['low'] & totalMarksOfTests['low'] & finalProjectMarks['high'] , studentsPerformance['average'])
        rule29 = ctrl.Rule(attendance['good'] & respondInClass['average'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['average'])
        rule30 = ctrl.Rule(attendance['good'] & respondInClass['good'] & totalMarksOfTests['low'] & finalProjectMarks['average'] , studentsPerformance['average'])

        rule31 = ctrl.Rule(attendance['good'] & respondInClass['good'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['average'])
        rule32 = ctrl.Rule(attendance['excellent'] & respondInClass['good'] & totalMarksOfTests['low'] & finalProjectMarks['low'] , studentsPerformance['average'])
        rule33 = ctrl.Rule(attendance['average'] & respondInClass['excellent'] & totalMarksOfTests['average'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule34 = ctrl.Rule(attendance['good'] & respondInClass['good'] & totalMarksOfTests['high'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule35 = ctrl.Rule(attendance['good'] & respondInClass['good'] & totalMarksOfTests['very_high'] & finalProjectMarks['very_high'] , studentsPerformance['good'])
        rule36 = ctrl.Rule(attendance['good'] & respondInClass['low'] & totalMarksOfTests['very_high'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule37 = ctrl.Rule(attendance['good'] & respondInClass['excellent'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_low'] , studentsPerformance['good'])
        rule38 = ctrl.Rule(attendance['excellent'] & respondInClass['average'] & totalMarksOfTests['very_high'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule39 = ctrl.Rule(attendance['excellent'] & respondInClass['excellent'] & totalMarksOfTests['average'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule40 = ctrl.Rule(attendance['excellent'] & respondInClass['very_low'] & totalMarksOfTests['very_low'] & finalProjectMarks['very_high'] , studentsPerformance['good'])

        rule41 = ctrl.Rule(attendance['excellent'] & respondInClass['good'] & totalMarksOfTests['high'] & finalProjectMarks['high'] , studentsPerformance['good'])
        rule42 = ctrl.Rule(attendance['excellent'] & respondInClass['good'] & totalMarksOfTests['high'] & finalProjectMarks['average'] , studentsPerformance['good'])
        rule43 = ctrl.Rule(attendance['good'] & respondInClass['very_low'] & totalMarksOfTests['very_high'] & finalProjectMarks['very_high'] , studentsPerformance['excellent'])
        rule44 = ctrl.Rule(attendance['good'] & respondInClass['excellent'] & totalMarksOfTests['high'] & finalProjectMarks['very_high'] , studentsPerformance['excellent'])
        rule45 = ctrl.Rule(attendance['good'] & respondInClass['good'] & totalMarksOfTests['very_high'] & finalProjectMarks['very_high'] , studentsPerformance['excellent'])
        rule46 = ctrl.Rule(attendance['good'] & respondInClass['excellent'] & totalMarksOfTests['very_high'] & finalProjectMarks['high'] , studentsPerformance['excellent'])
        rule47 = ctrl.Rule(attendance['excellent'] & respondInClass['excellent'] & totalMarksOfTests['high'] & finalProjectMarks['high'] , studentsPerformance['excellent'])
        rule48 = ctrl.Rule(attendance['excellent'] & respondInClass['good'] & totalMarksOfTests['very_high'] & finalProjectMarks['very_high'] , studentsPerformance['excellent'])
        rule49 = ctrl.Rule(attendance['excellent'] & respondInClass['excellent'] & totalMarksOfTests['very_high'] & finalProjectMarks['high'] , studentsPerformance['excellent'])
        rule50 = ctrl.Rule(attendance['excellent'] & respondInClass['excellent'] & totalMarksOfTests['very_high'] & finalProjectMarks['very_high'] , studentsPerformance['excellent'])

        """# Control System Creation"""
        performance_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10,
                                         rule11, rule12, rule13, rule14, rule15, rule16, rule17, rule18, rule19, rule20,
                                         rule21, rule22, rule23, rule24, rule25, rule26, rule27, rule28, rule29, rule30,
                                         rule31, rule32, rule33, rule34, rule35, rule36, rule37, rule38, rule39, rule40,
                                         rule41, rule42, rule43, rule44, rule45, rule46, rule47, rule48, rule49, rule50])

        performance = ctrl.ControlSystemSimulation(performance_ctrl)

        performance.input['attendance'] = a
        performance.input['respondInClass'] = b
        performance.input['totalMarksOfTests'] = c
        performance.input['finalProjectMarks'] = d
        
        total = a+b+c+d
            
           
        if total >0:
            self.total.set( format(total, "8,.2f"))
        #if negative values inserted
        elif total<0:
            totalerror = "-"
            self.total.set(totalerror)
            

        if total >0 and total< 401:
          performance.compute()
          cog=performance .output['studentsPerformance']
          self.cog.set(format(cog,"8,.2f"))
          #nak keluarkan value consequent
          if cog >= 0 and cog < 31:
            output1 = "Poor"
            self.output1.set(output1)
          elif cog >19 and cog < 51:
            output1 = "Sufficient"
            self.output1.set(output1)
          elif cog >39 and cog < 71:
            output1 = "Average"
            self.output1.set(output1)
          elif cog >59 and cog < 91:
            output1 = "Good"
            self.output1.set(output1)
          elif cog >79 and cog < 101:
            output1 = "Excellent"
            self.output1.set(output1)
                
          print('Successful')
        
        #if negative values inserted
        elif total<0:
            messagebox.showerror("Error","Rules not found. Please put the correct number of range")
        
        else:
             messagebox.showerror("Error","No suitable rules found")
             print('No suitable rules found')
        


        print(performance .output['studentsPerformance'])
        attendance.view()
        respondInClass.view()
        totalMarksOfTests.view()
        finalProjectMarks.view()
        studentsPerformance.view(sim=performance)
        
        
     
        
StudentsAcademicPerformance()
